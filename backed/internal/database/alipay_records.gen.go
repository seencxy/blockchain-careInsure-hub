// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAlipayRecord(db *gorm.DB, opts ...gen.DOOption) alipayRecord {
	_alipayRecord := alipayRecord{}

	_alipayRecord.alipayRecordDo.UseDB(db, opts...)
	_alipayRecord.alipayRecordDo.UseModel(&models.AlipayRecord{})

	tableName := _alipayRecord.alipayRecordDo.TableName()
	_alipayRecord.ALL = field.NewAsterisk(tableName)
	_alipayRecord.ID = field.NewUint(tableName, "id")
	_alipayRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_alipayRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_alipayRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_alipayRecord.Username = field.NewString(tableName, "username")
	_alipayRecord.Timestamp = field.NewTime(tableName, "timestamp")
	_alipayRecord.Code = field.NewString(tableName, "code")
	_alipayRecord.Status = field.NewInt64(tableName, "status")
	_alipayRecord.Choose = field.NewInt64(tableName, "choose")
	_alipayRecord.Account = field.NewString(tableName, "account")

	_alipayRecord.fillFieldMap()

	return _alipayRecord
}

type alipayRecord struct {
	alipayRecordDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Username  field.String
	Timestamp field.Time
	Code      field.String
	Status    field.Int64
	Choose    field.Int64
	Account   field.String

	fieldMap map[string]field.Expr
}

func (a alipayRecord) Table(newTableName string) *alipayRecord {
	a.alipayRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alipayRecord) As(alias string) *alipayRecord {
	a.alipayRecordDo.DO = *(a.alipayRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alipayRecord) updateTableName(table string) *alipayRecord {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Username = field.NewString(table, "username")
	a.Timestamp = field.NewTime(table, "timestamp")
	a.Code = field.NewString(table, "code")
	a.Status = field.NewInt64(table, "status")
	a.Choose = field.NewInt64(table, "choose")
	a.Account = field.NewString(table, "account")

	a.fillFieldMap()

	return a
}

func (a *alipayRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alipayRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["username"] = a.Username
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["code"] = a.Code
	a.fieldMap["status"] = a.Status
	a.fieldMap["choose"] = a.Choose
	a.fieldMap["account"] = a.Account
}

func (a alipayRecord) clone(db *gorm.DB) alipayRecord {
	a.alipayRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alipayRecord) replaceDB(db *gorm.DB) alipayRecord {
	a.alipayRecordDo.ReplaceDB(db)
	return a
}

type alipayRecordDo struct{ gen.DO }

type IAlipayRecordDo interface {
	gen.SubQuery
	Debug() IAlipayRecordDo
	WithContext(ctx context.Context) IAlipayRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlipayRecordDo
	WriteDB() IAlipayRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlipayRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlipayRecordDo
	Not(conds ...gen.Condition) IAlipayRecordDo
	Or(conds ...gen.Condition) IAlipayRecordDo
	Select(conds ...field.Expr) IAlipayRecordDo
	Where(conds ...gen.Condition) IAlipayRecordDo
	Order(conds ...field.Expr) IAlipayRecordDo
	Distinct(cols ...field.Expr) IAlipayRecordDo
	Omit(cols ...field.Expr) IAlipayRecordDo
	Join(table schema.Tabler, on ...field.Expr) IAlipayRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlipayRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlipayRecordDo
	Group(cols ...field.Expr) IAlipayRecordDo
	Having(conds ...gen.Condition) IAlipayRecordDo
	Limit(limit int) IAlipayRecordDo
	Offset(offset int) IAlipayRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlipayRecordDo
	Unscoped() IAlipayRecordDo
	Create(values ...*models.AlipayRecord) error
	CreateInBatches(values []*models.AlipayRecord, batchSize int) error
	Save(values ...*models.AlipayRecord) error
	First() (*models.AlipayRecord, error)
	Take() (*models.AlipayRecord, error)
	Last() (*models.AlipayRecord, error)
	Find() ([]*models.AlipayRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AlipayRecord, err error)
	FindInBatches(result *[]*models.AlipayRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AlipayRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlipayRecordDo
	Assign(attrs ...field.AssignExpr) IAlipayRecordDo
	Joins(fields ...field.RelationField) IAlipayRecordDo
	Preload(fields ...field.RelationField) IAlipayRecordDo
	FirstOrInit() (*models.AlipayRecord, error)
	FirstOrCreate() (*models.AlipayRecord, error)
	FindByPage(offset int, limit int) (result []*models.AlipayRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlipayRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alipayRecordDo) Debug() IAlipayRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a alipayRecordDo) WithContext(ctx context.Context) IAlipayRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alipayRecordDo) ReadDB() IAlipayRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a alipayRecordDo) WriteDB() IAlipayRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a alipayRecordDo) Session(config *gorm.Session) IAlipayRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a alipayRecordDo) Clauses(conds ...clause.Expression) IAlipayRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alipayRecordDo) Returning(value interface{}, columns ...string) IAlipayRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alipayRecordDo) Not(conds ...gen.Condition) IAlipayRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alipayRecordDo) Or(conds ...gen.Condition) IAlipayRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alipayRecordDo) Select(conds ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alipayRecordDo) Where(conds ...gen.Condition) IAlipayRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alipayRecordDo) Order(conds ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alipayRecordDo) Distinct(cols ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alipayRecordDo) Omit(cols ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alipayRecordDo) Join(table schema.Tabler, on ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alipayRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alipayRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alipayRecordDo) Group(cols ...field.Expr) IAlipayRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alipayRecordDo) Having(conds ...gen.Condition) IAlipayRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alipayRecordDo) Limit(limit int) IAlipayRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alipayRecordDo) Offset(offset int) IAlipayRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alipayRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlipayRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alipayRecordDo) Unscoped() IAlipayRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alipayRecordDo) Create(values ...*models.AlipayRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alipayRecordDo) CreateInBatches(values []*models.AlipayRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alipayRecordDo) Save(values ...*models.AlipayRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alipayRecordDo) First() (*models.AlipayRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlipayRecord), nil
	}
}

func (a alipayRecordDo) Take() (*models.AlipayRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlipayRecord), nil
	}
}

func (a alipayRecordDo) Last() (*models.AlipayRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlipayRecord), nil
	}
}

func (a alipayRecordDo) Find() ([]*models.AlipayRecord, error) {
	result, err := a.DO.Find()
	return result.([]*models.AlipayRecord), err
}

func (a alipayRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AlipayRecord, err error) {
	buf := make([]*models.AlipayRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alipayRecordDo) FindInBatches(result *[]*models.AlipayRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alipayRecordDo) Attrs(attrs ...field.AssignExpr) IAlipayRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alipayRecordDo) Assign(attrs ...field.AssignExpr) IAlipayRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alipayRecordDo) Joins(fields ...field.RelationField) IAlipayRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alipayRecordDo) Preload(fields ...field.RelationField) IAlipayRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alipayRecordDo) FirstOrInit() (*models.AlipayRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlipayRecord), nil
	}
}

func (a alipayRecordDo) FirstOrCreate() (*models.AlipayRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlipayRecord), nil
	}
}

func (a alipayRecordDo) FindByPage(offset int, limit int) (result []*models.AlipayRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alipayRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alipayRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alipayRecordDo) Delete(models ...*models.AlipayRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alipayRecordDo) withDO(do gen.Dao) *alipayRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}
