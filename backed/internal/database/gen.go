// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	AlipayRecord     *alipayRecord
	Combo            *combo
	ComboDescription *comboDescription
	TransferAccount  *transferAccount
	UserInfo         *userInfo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AlipayRecord = &Q.AlipayRecord
	Combo = &Q.Combo
	ComboDescription = &Q.ComboDescription
	TransferAccount = &Q.TransferAccount
	UserInfo = &Q.UserInfo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		AlipayRecord:     newAlipayRecord(db, opts...),
		Combo:            newCombo(db, opts...),
		ComboDescription: newComboDescription(db, opts...),
		TransferAccount:  newTransferAccount(db, opts...),
		UserInfo:         newUserInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AlipayRecord     alipayRecord
	Combo            combo
	ComboDescription comboDescription
	TransferAccount  transferAccount
	UserInfo         userInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		AlipayRecord:     q.AlipayRecord.clone(db),
		Combo:            q.Combo.clone(db),
		ComboDescription: q.ComboDescription.clone(db),
		TransferAccount:  q.TransferAccount.clone(db),
		UserInfo:         q.UserInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		AlipayRecord:     q.AlipayRecord.replaceDB(db),
		Combo:            q.Combo.replaceDB(db),
		ComboDescription: q.ComboDescription.replaceDB(db),
		TransferAccount:  q.TransferAccount.replaceDB(db),
		UserInfo:         q.UserInfo.replaceDB(db),
	}
}

type queryCtx struct {
	AlipayRecord     IAlipayRecordDo
	Combo            IComboDo
	ComboDescription IComboDescriptionDo
	TransferAccount  ITransferAccountDo
	UserInfo         IUserInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AlipayRecord:     q.AlipayRecord.WithContext(ctx),
		Combo:            q.Combo.WithContext(ctx),
		ComboDescription: q.ComboDescription.WithContext(ctx),
		TransferAccount:  q.TransferAccount.WithContext(ctx),
		UserInfo:         q.UserInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
