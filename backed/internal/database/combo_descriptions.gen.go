// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newComboDescription(db *gorm.DB, opts ...gen.DOOption) comboDescription {
	_comboDescription := comboDescription{}

	_comboDescription.comboDescriptionDo.UseDB(db, opts...)
	_comboDescription.comboDescriptionDo.UseModel(&models.ComboDescription{})

	tableName := _comboDescription.comboDescriptionDo.TableName()
	_comboDescription.ALL = field.NewAsterisk(tableName)
	_comboDescription.ID = field.NewUint(tableName, "id")
	_comboDescription.CreatedAt = field.NewTime(tableName, "created_at")
	_comboDescription.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comboDescription.DeletedAt = field.NewField(tableName, "deleted_at")
	_comboDescription.ComboID = field.NewUint(tableName, "combo_id")
	_comboDescription.Description = field.NewString(tableName, "description")

	_comboDescription.fillFieldMap()

	return _comboDescription
}

type comboDescription struct {
	comboDescriptionDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	ComboID     field.Uint
	Description field.String

	fieldMap map[string]field.Expr
}

func (c comboDescription) Table(newTableName string) *comboDescription {
	c.comboDescriptionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comboDescription) As(alias string) *comboDescription {
	c.comboDescriptionDo.DO = *(c.comboDescriptionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comboDescription) updateTableName(table string) *comboDescription {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.ComboID = field.NewUint(table, "combo_id")
	c.Description = field.NewString(table, "description")

	c.fillFieldMap()

	return c
}

func (c *comboDescription) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comboDescription) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["combo_id"] = c.ComboID
	c.fieldMap["description"] = c.Description
}

func (c comboDescription) clone(db *gorm.DB) comboDescription {
	c.comboDescriptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comboDescription) replaceDB(db *gorm.DB) comboDescription {
	c.comboDescriptionDo.ReplaceDB(db)
	return c
}

type comboDescriptionDo struct{ gen.DO }

type IComboDescriptionDo interface {
	gen.SubQuery
	Debug() IComboDescriptionDo
	WithContext(ctx context.Context) IComboDescriptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComboDescriptionDo
	WriteDB() IComboDescriptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComboDescriptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComboDescriptionDo
	Not(conds ...gen.Condition) IComboDescriptionDo
	Or(conds ...gen.Condition) IComboDescriptionDo
	Select(conds ...field.Expr) IComboDescriptionDo
	Where(conds ...gen.Condition) IComboDescriptionDo
	Order(conds ...field.Expr) IComboDescriptionDo
	Distinct(cols ...field.Expr) IComboDescriptionDo
	Omit(cols ...field.Expr) IComboDescriptionDo
	Join(table schema.Tabler, on ...field.Expr) IComboDescriptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComboDescriptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComboDescriptionDo
	Group(cols ...field.Expr) IComboDescriptionDo
	Having(conds ...gen.Condition) IComboDescriptionDo
	Limit(limit int) IComboDescriptionDo
	Offset(offset int) IComboDescriptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComboDescriptionDo
	Unscoped() IComboDescriptionDo
	Create(values ...*models.ComboDescription) error
	CreateInBatches(values []*models.ComboDescription, batchSize int) error
	Save(values ...*models.ComboDescription) error
	First() (*models.ComboDescription, error)
	Take() (*models.ComboDescription, error)
	Last() (*models.ComboDescription, error)
	Find() ([]*models.ComboDescription, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ComboDescription, err error)
	FindInBatches(result *[]*models.ComboDescription, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ComboDescription) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComboDescriptionDo
	Assign(attrs ...field.AssignExpr) IComboDescriptionDo
	Joins(fields ...field.RelationField) IComboDescriptionDo
	Preload(fields ...field.RelationField) IComboDescriptionDo
	FirstOrInit() (*models.ComboDescription, error)
	FirstOrCreate() (*models.ComboDescription, error)
	FindByPage(offset int, limit int) (result []*models.ComboDescription, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComboDescriptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c comboDescriptionDo) Debug() IComboDescriptionDo {
	return c.withDO(c.DO.Debug())
}

func (c comboDescriptionDo) WithContext(ctx context.Context) IComboDescriptionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comboDescriptionDo) ReadDB() IComboDescriptionDo {
	return c.Clauses(dbresolver.Read)
}

func (c comboDescriptionDo) WriteDB() IComboDescriptionDo {
	return c.Clauses(dbresolver.Write)
}

func (c comboDescriptionDo) Session(config *gorm.Session) IComboDescriptionDo {
	return c.withDO(c.DO.Session(config))
}

func (c comboDescriptionDo) Clauses(conds ...clause.Expression) IComboDescriptionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comboDescriptionDo) Returning(value interface{}, columns ...string) IComboDescriptionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comboDescriptionDo) Not(conds ...gen.Condition) IComboDescriptionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comboDescriptionDo) Or(conds ...gen.Condition) IComboDescriptionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comboDescriptionDo) Select(conds ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comboDescriptionDo) Where(conds ...gen.Condition) IComboDescriptionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comboDescriptionDo) Order(conds ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comboDescriptionDo) Distinct(cols ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comboDescriptionDo) Omit(cols ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comboDescriptionDo) Join(table schema.Tabler, on ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comboDescriptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comboDescriptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comboDescriptionDo) Group(cols ...field.Expr) IComboDescriptionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comboDescriptionDo) Having(conds ...gen.Condition) IComboDescriptionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comboDescriptionDo) Limit(limit int) IComboDescriptionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comboDescriptionDo) Offset(offset int) IComboDescriptionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comboDescriptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComboDescriptionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comboDescriptionDo) Unscoped() IComboDescriptionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comboDescriptionDo) Create(values ...*models.ComboDescription) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comboDescriptionDo) CreateInBatches(values []*models.ComboDescription, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comboDescriptionDo) Save(values ...*models.ComboDescription) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comboDescriptionDo) First() (*models.ComboDescription, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ComboDescription), nil
	}
}

func (c comboDescriptionDo) Take() (*models.ComboDescription, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ComboDescription), nil
	}
}

func (c comboDescriptionDo) Last() (*models.ComboDescription, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ComboDescription), nil
	}
}

func (c comboDescriptionDo) Find() ([]*models.ComboDescription, error) {
	result, err := c.DO.Find()
	return result.([]*models.ComboDescription), err
}

func (c comboDescriptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ComboDescription, err error) {
	buf := make([]*models.ComboDescription, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comboDescriptionDo) FindInBatches(result *[]*models.ComboDescription, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comboDescriptionDo) Attrs(attrs ...field.AssignExpr) IComboDescriptionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comboDescriptionDo) Assign(attrs ...field.AssignExpr) IComboDescriptionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comboDescriptionDo) Joins(fields ...field.RelationField) IComboDescriptionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comboDescriptionDo) Preload(fields ...field.RelationField) IComboDescriptionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comboDescriptionDo) FirstOrInit() (*models.ComboDescription, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ComboDescription), nil
	}
}

func (c comboDescriptionDo) FirstOrCreate() (*models.ComboDescription, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ComboDescription), nil
	}
}

func (c comboDescriptionDo) FindByPage(offset int, limit int) (result []*models.ComboDescription, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comboDescriptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comboDescriptionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comboDescriptionDo) Delete(models ...*models.ComboDescription) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comboDescriptionDo) withDO(do gen.Dao) *comboDescriptionDo {
	c.DO = *do.(*gen.DO)
	return c
}
