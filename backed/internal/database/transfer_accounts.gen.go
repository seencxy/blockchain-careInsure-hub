// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"backed/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTransferAccount(db *gorm.DB, opts ...gen.DOOption) transferAccount {
	_transferAccount := transferAccount{}

	_transferAccount.transferAccountDo.UseDB(db, opts...)
	_transferAccount.transferAccountDo.UseModel(&models.TransferAccount{})

	tableName := _transferAccount.transferAccountDo.TableName()
	_transferAccount.ALL = field.NewAsterisk(tableName)
	_transferAccount.ID = field.NewUint(tableName, "id")
	_transferAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_transferAccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_transferAccount.DeletedAt = field.NewField(tableName, "deleted_at")
	_transferAccount.Username = field.NewString(tableName, "username")
	_transferAccount.Account = field.NewString(tableName, "account")
	_transferAccount.Mount = field.NewString(tableName, "mount")
	_transferAccount.Timestamp = field.NewTime(tableName, "timestamp")
	_transferAccount.OutBizNo = field.NewString(tableName, "out_biz_no")

	_transferAccount.fillFieldMap()

	return _transferAccount
}

type transferAccount struct {
	transferAccountDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Username  field.String
	Account   field.String
	Mount     field.String
	Timestamp field.Time
	OutBizNo  field.String

	fieldMap map[string]field.Expr
}

func (t transferAccount) Table(newTableName string) *transferAccount {
	t.transferAccountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transferAccount) As(alias string) *transferAccount {
	t.transferAccountDo.DO = *(t.transferAccountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transferAccount) updateTableName(table string) *transferAccount {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Username = field.NewString(table, "username")
	t.Account = field.NewString(table, "account")
	t.Mount = field.NewString(table, "mount")
	t.Timestamp = field.NewTime(table, "timestamp")
	t.OutBizNo = field.NewString(table, "out_biz_no")

	t.fillFieldMap()

	return t
}

func (t *transferAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transferAccount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["username"] = t.Username
	t.fieldMap["account"] = t.Account
	t.fieldMap["mount"] = t.Mount
	t.fieldMap["timestamp"] = t.Timestamp
	t.fieldMap["out_biz_no"] = t.OutBizNo
}

func (t transferAccount) clone(db *gorm.DB) transferAccount {
	t.transferAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transferAccount) replaceDB(db *gorm.DB) transferAccount {
	t.transferAccountDo.ReplaceDB(db)
	return t
}

type transferAccountDo struct{ gen.DO }

type ITransferAccountDo interface {
	gen.SubQuery
	Debug() ITransferAccountDo
	WithContext(ctx context.Context) ITransferAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransferAccountDo
	WriteDB() ITransferAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransferAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransferAccountDo
	Not(conds ...gen.Condition) ITransferAccountDo
	Or(conds ...gen.Condition) ITransferAccountDo
	Select(conds ...field.Expr) ITransferAccountDo
	Where(conds ...gen.Condition) ITransferAccountDo
	Order(conds ...field.Expr) ITransferAccountDo
	Distinct(cols ...field.Expr) ITransferAccountDo
	Omit(cols ...field.Expr) ITransferAccountDo
	Join(table schema.Tabler, on ...field.Expr) ITransferAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransferAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransferAccountDo
	Group(cols ...field.Expr) ITransferAccountDo
	Having(conds ...gen.Condition) ITransferAccountDo
	Limit(limit int) ITransferAccountDo
	Offset(offset int) ITransferAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransferAccountDo
	Unscoped() ITransferAccountDo
	Create(values ...*models.TransferAccount) error
	CreateInBatches(values []*models.TransferAccount, batchSize int) error
	Save(values ...*models.TransferAccount) error
	First() (*models.TransferAccount, error)
	Take() (*models.TransferAccount, error)
	Last() (*models.TransferAccount, error)
	Find() ([]*models.TransferAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TransferAccount, err error)
	FindInBatches(result *[]*models.TransferAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TransferAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransferAccountDo
	Assign(attrs ...field.AssignExpr) ITransferAccountDo
	Joins(fields ...field.RelationField) ITransferAccountDo
	Preload(fields ...field.RelationField) ITransferAccountDo
	FirstOrInit() (*models.TransferAccount, error)
	FirstOrCreate() (*models.TransferAccount, error)
	FindByPage(offset int, limit int) (result []*models.TransferAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransferAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transferAccountDo) Debug() ITransferAccountDo {
	return t.withDO(t.DO.Debug())
}

func (t transferAccountDo) WithContext(ctx context.Context) ITransferAccountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transferAccountDo) ReadDB() ITransferAccountDo {
	return t.Clauses(dbresolver.Read)
}

func (t transferAccountDo) WriteDB() ITransferAccountDo {
	return t.Clauses(dbresolver.Write)
}

func (t transferAccountDo) Session(config *gorm.Session) ITransferAccountDo {
	return t.withDO(t.DO.Session(config))
}

func (t transferAccountDo) Clauses(conds ...clause.Expression) ITransferAccountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transferAccountDo) Returning(value interface{}, columns ...string) ITransferAccountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transferAccountDo) Not(conds ...gen.Condition) ITransferAccountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transferAccountDo) Or(conds ...gen.Condition) ITransferAccountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transferAccountDo) Select(conds ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transferAccountDo) Where(conds ...gen.Condition) ITransferAccountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transferAccountDo) Order(conds ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transferAccountDo) Distinct(cols ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transferAccountDo) Omit(cols ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transferAccountDo) Join(table schema.Tabler, on ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transferAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transferAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transferAccountDo) Group(cols ...field.Expr) ITransferAccountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transferAccountDo) Having(conds ...gen.Condition) ITransferAccountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transferAccountDo) Limit(limit int) ITransferAccountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transferAccountDo) Offset(offset int) ITransferAccountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transferAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransferAccountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transferAccountDo) Unscoped() ITransferAccountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transferAccountDo) Create(values ...*models.TransferAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transferAccountDo) CreateInBatches(values []*models.TransferAccount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transferAccountDo) Save(values ...*models.TransferAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transferAccountDo) First() (*models.TransferAccount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransferAccount), nil
	}
}

func (t transferAccountDo) Take() (*models.TransferAccount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransferAccount), nil
	}
}

func (t transferAccountDo) Last() (*models.TransferAccount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransferAccount), nil
	}
}

func (t transferAccountDo) Find() ([]*models.TransferAccount, error) {
	result, err := t.DO.Find()
	return result.([]*models.TransferAccount), err
}

func (t transferAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TransferAccount, err error) {
	buf := make([]*models.TransferAccount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transferAccountDo) FindInBatches(result *[]*models.TransferAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transferAccountDo) Attrs(attrs ...field.AssignExpr) ITransferAccountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transferAccountDo) Assign(attrs ...field.AssignExpr) ITransferAccountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transferAccountDo) Joins(fields ...field.RelationField) ITransferAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transferAccountDo) Preload(fields ...field.RelationField) ITransferAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transferAccountDo) FirstOrInit() (*models.TransferAccount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransferAccount), nil
	}
}

func (t transferAccountDo) FirstOrCreate() (*models.TransferAccount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransferAccount), nil
	}
}

func (t transferAccountDo) FindByPage(offset int, limit int) (result []*models.TransferAccount, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transferAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transferAccountDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transferAccountDo) Delete(models ...*models.TransferAccount) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transferAccountDo) withDO(do gen.Dao) *transferAccountDo {
	t.DO = *do.(*gen.DO)
	return t
}
